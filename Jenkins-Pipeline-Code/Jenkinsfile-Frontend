pipeline {
    agent any

    tools {
        nodejs 'nodejs'
    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        AWS_ACCOUNT_ID = credentials('ACCOUNT_ID')
        AWS_ECR_REPO_NAME = credentials('ECR_REPO1')
        AWS_DEFAULT_REGION = 'ap-south-1'
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/"
        GIT_REPO_NAME = "Kubernetes-Three-Tier-DevSecOps-Project"
        GIT_USER_NAME = "iabhishekpratap"
    }

    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout from Git') {
            steps {
                git branch: 'main',
                    credentialsId: 'GITHUB-APP',
                    url: 'https://github.com/iabhishekpratap/Kubernetes-Three-Tier-DevSecOps-Project.git'
            }
        }

        stage('SonarQube Analysis - Frontend') {
            steps {
                dir('Application-Code/frontend') {
                    withSonarQubeEnv('sonar-server') {
                        withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                            sh """
                                ${SCANNER_HOME}/bin/sonar-scanner \
                                -Dsonar.projectKey=frontend \
                                -Dsonar.sources=. \
                                -Dsonar.token=${SONAR_TOKEN} \
                                -Dsonar.exclusions=node_modules/**,build/**
                            """
                        }
                    }
                }
            }
        }

        stage('Quality Gate Check') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                }
            }
        }

        stage('Trivy File Scan') {
            steps {
                dir('Application-Code/frontend') {
                    sh 'trivy fs . > trivyfs.txt'
                }
            }
        }

        stage("Docker Image Build") {
            steps {
                dir('Application-Code/frontend') {
                    sh 'docker system prune -f'
                    sh 'docker container prune -f'
                    sh "docker build -t ${AWS_ECR_REPO_NAME} ."
                }
            }
        }

        stage("ECR Image Pushing") {
            steps {
                sh "aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${REPOSITORY_URI}"
                sh "docker tag ${AWS_ECR_REPO_NAME} ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}"
                sh "docker push ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}"
            }
        }

        stage("TRIVY Image Scan") {
            steps {
                sh "trivy image ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER} > trivyimage.txt"
            }
        }

        stage('Checkout Code Again') {
            steps {
                git branch: 'main',
                    credentialsId: 'GITHUB-APP',
                    url: 'https://github.com/iabhishekpratap/Kubernetes-Three-Tier-DevSecOps-Project.git'
            }
        }

        stage('Update Deployment File') {
            steps {
                dir('Kubernetes-Manifests-file/Frontend') {
                    withCredentials([string(credentialsId: 'GITHUB-APP', variable: 'GITHUB_TOKEN')]) {
                        sh """
                            git config user.email "iapsingh@outlook.com"
                            git config user.name "${GIT_USER_NAME}"

                            imageTag=\$(grep -oP '(?<=frontend:)[^ ]+' deployment.yaml)
                            echo "Old Image Tag: \$imageTag"
                            sed -i "s/${AWS_ECR_REPO_NAME}:\$imageTag/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}/" deployment.yaml

                            git add deployment.yaml
                            git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                        """
                    }
                }
            }
        }
    }
}
